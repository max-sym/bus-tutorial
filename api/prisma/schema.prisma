// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tripsFrom Trip[]   @relation("cityFrom")
  tripsTo   Trip[]   @relation("cityTo")
}

model Trip {
  id            Int            @id @default(autoincrement())
  departure     DateTime
  arrival       DateTime
  busId         Int
  bus           Bus            @relation(fields: [busId], references: [id])
  cityFromId    Int
  cityFrom      City           @relation("cityFrom", fields: [cityFromId], references: [id])
  cityToId      Int
  cityTo        City           @relation("cityTo", fields: [cityToId], references: [id])
  price         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reservedTrips ReservedTrip[]
}

model Bus {
  id        Int      @id @default(autoincrement())
  name      String
  trips     Trip[]
  seats     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketState {
  CREATED
  ONBOARDED
}

enum PassengerType {
  ADULT
  CHILD
  INFANT
}

model ReservedTicket {
  id             Int          @id @default(autoincrement())
  passenger      Passenger    @relation(fields: [passengerId], references: [id])
  passengerId    Int
  state          TicketState  @default(CREATED)
  reservedTrip   ReservedTrip @relation(fields: [reservedTripId], references: [id], onDelete: Cascade)
  reservedTripId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Passenger {
  id              Int              @id @default(autoincrement())
  name            String?
  email           String?
  citizenId       String?
  personType      PassengerType    @default(ADULT)
  reservedTickets ReservedTicket[]
  reservation     Reservation      @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId   Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ReservedTrip {
  id              Int              @id @default(autoincrement())
  trip            Trip             @relation(fields: [tripId], references: [id])
  tripId          Int
  reservation     Reservation      @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId   Int
  reservedTickets ReservedTicket[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum ReservationState {
  CREATED
  PAID
  ONBOARDED
}

model Reservation {
  id            Int              @id @default(autoincrement())
  token         String           @unique
  passengers    Passenger[]
  reservedTrips ReservedTrip[]
  state         ReservationState @default(CREATED)
  expiresAt     DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User?            @relation(fields: [userId], references: [id])
  userId        Int?
}

model User {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(100)
  email           String        @unique @db.VarChar(100)
  password        String
  isEmailVerified Boolean       @default(false)
  acceptedPrivacy Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tokens          Token[]
  reservations    Reservation[]
}

enum TokenType {
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model Token {
  id          Int        @id @default(autoincrement())
  token       String     @unique
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        TokenType?
  expires     DateTime   @db.Timestamp()
  blacklisted Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
